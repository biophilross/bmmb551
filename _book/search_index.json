[
["index.html", "Genomics (BMMB 551) What is this?", " Genomics (BMMB 551) Philipp Ross 2016-07-14 What is this? This is an online book of all homework assignments for the class BMMB 551 as taught by Dr. Ross Hardison at Pennsylvania State University in the Spring of 2016. Instead of submitting static documents (.pdf, .docx, etc.) I decided to submit my homework assignments as webpages. This way content can be updated and I can even include interactive content using shiny. "],
["lesson1.html", "1 Molecular genetics 1.1 Learning Objectives 1.2 Assignment", " 1 Molecular genetics 1.1 Learning Objectives Identify the fundamental characteristics of genes. Explain what aspects of DNA structure are essential to making a genes. Identify the reverse complement of a protein coding sequence. Discuss the biological and bioinformatic implications of genes being in pieces (i.e., exons separated by introns). Describe the relationship between genes and chromosomes Define epigenetic features. 1.2 Assignment 1. What does the word “gene” mean in casual conversation, and what does it mean biologically? While the casual definition of a gene has remained unchanged for many years, the biological definition continues to evolve. In casual conversation, most people refer to genes as the fundamental building blocks that make up who they are. They’re often thought of as the only heritable aspects of their molecular makeup and typically cited in a static and isolated context. Biologically, genes are discrete intervals distributed linearly along an organisms genetic material. These intervals are made of specific sequences of nucleotides that encode information to be recognized by specific proteins of a cell to read, transcribe, and translate into different mediums such as a different species of nucleic acid or polypeptides. Some intervals encode information whose ultimate product is a protein while others are fated to be transcribed from DNA to RNA, but no further. While not all transcribed intervals found within an organisms genome are considered genes, it typicaly depends on the functional aspects of the RNA molecule produced: was it created intentionally to serve a purpose or was the RNA a byproduct of promiscuous transcription? As the field of genomics matures, it’s likely that the term “gene” will lose its prestige as the only heritable unit of the genome to consider in casual conversation. In time, we will begin to consider other functional and heritable aspects of genomes that influence phenotype. 2. Given this string of deoxyribonucleotides (“bases” in a single strand of DNA), what is the sequence of the complementary strand, i.e. the reverse complement? Please specify the orientation in your answer (i.e. label the 5’ end). Original strand: 5’ CTGACCATTGACATCAGGTC 3’ Its reverse compliment: 5’ GACCTGATGTCAATGGTCAG 3’ 3. Consider this sequence from a very small portion of a chromosome. Both strands are given along with a coordinate system, beginning with 1. The genome annotation tells you that a short peptide is encoded on the bottom strand (often referred to as the minus strand), from positions 11 to 73. 1 10 20 30 40 50 60 70 78 ....|....|....|....|....|....|....|....|....|....|....|....|....|....|....|..| 5’ TCCGGTAGTGTCATGCCTCTGAGCCCAAGAAGCCAGTCAGCAAGAAGGGGCCAGCACTGTTGTTATACCACATAGTAG AGGCCATCACAGTACGGAGACTCGGGTTCTTCGGTCAGTCGTTCTTCCCCGGTCGTGACAACAATATGGTGTATCATC 5’ Since this polypeptide is encoded on the minus strand, the plus strand is the template strand. Often times we represent nucleic acids linearly as it is here. When we refer to positions along the chromosome, they are always meant to go from left to right (or 5’ to 3’ if you focus on the plus strand). Thus, while the positions may be from 11 to 73 along the plus strand, the first six nucleotides are at positions 73, 72, 71, 70, 69, and 68 while the last six nucleotides are at positions 16, 15, 14, 13, 12, and 11 of the minus strand. What are the first six nucleotides? 5’ ATGTGG 3’ What are the last six nucleotides? 5’ GCATGA 3’ 4. Describe an epigenetic feature, and explain why it is considered epigenetic as opposed to genetic. Epigenetic features often refer to functional modifications to genetic material that don’t include nucleotide changes or mutations. These can be amino acid modifications along histones, the proteins that are part of the nucleosome units that make up chromatin in eukaryotes, or they can be modifications to the nucleotide itself, such as the addition or removal of methyl groups. These are considered epigenetic because these modifications are “on top” of the genetic information that’s encoded within the sequence of nucleotides. These chemical modifications effect how the information encoded within sequences are recognized. For example, it’s been shown in numerous experiments that methylation marks are typically signs of transcriptional repression. That is, if there is a region of the genome with an enriched methylation signature, the functional units in that region, be they non-coding RNA or open reading frames, are transcribed at a lower abundance relative to regions of average or lower levels of methylation, including the aforementioned region itself. Whether or not we should restrict epigenetic features to those that can be inherited from parent to daughter cells is undetermined. Personally, I feel that we should try to remain abstract when it comes to defining molecular features since is still much to learn. For example, genetic material is typically thought of as the molecular material that encodes information that can be passed on to the following generation of cells and/or organisms. The information tells the cell how and when to function and emerges as an observable phenotype. People typically think of this as nucleic acid sequences that are inherited by the next generation. Epigenetic features add another layer of information on top of nucleic acid sequences that can have a measurable effect on phenotype so the real question becomes, is this layer of information heritable? This is difficult to answer. Ideally, one would have a system in which the genetic material that’s passed on between generations remains unchanged to study whether the epigenetic modifications are passed on and confer the same phenotype as in the parental generation(s) but this is difficult to control for. Another interesting question one might ask is, how do we define inheritance? In Lambert and Kussel 2014, they show that E coli can pass on proteins to its daughter cells as a form of “non-genetic memory” and that this confers a kind of “phenotypic memory” for the following generations. The protein in this case is a lac protein encoded in the lac operon needed to metabolize lactose. Here, they were able to show that by passing on the lac proteins, an E. coli population is able to metabolize lactose prior to the induction of the lac operon, which is repressed by default (as long as the population of cells has access to glucose). Does this so-called phenotypic memory count as inheritance? Lambert and Kussel were able to show that the proteins that were passed on had a measurable effect on the phenotypes of the following generations. However, there are no genetic differences between the different generations of bacteria. In other words, the memory of this phenotype as an adaptive trait is lost as soon as its environment changes (e.g. glucose is reintroduced). Clearly, we have yet to fully understand the links between genotypes and phenotypes and before we do, it’s best to remain flexible yet clear and concise in regards to terminology. "],
["lesson2.html", "2 Genomics 2.1 Learning Objectives 2.2 Assignment", " 2 Genomics 2.1 Learning Objectives Define a genome. Explain how genomics relates to genetics and biochemistry. Explain the four phases of genomics. Along with a large size, explain other challenges in dealing with large genomes. Explain the metaphor for “dark matter of the genome”. 2.2 Assignment 1. How is genomics similar to and different from genetics and biochemistry? What attributes are distinctive to genomics? Whereas genetics is mainly focused on genes and heritable phenotypes (traits) genomics looks at the entirety of the genome — both the genic and non-genic aspects of it. Biochemistry, on the other hand, is the study of the chemistry of living organisms and/or cells and can be thought of more as a foundation of genetics and genomics. For example, high throughput sequencing relies heavily on advances in the understanding and automation of biochemical reactions to measure DNA molecules. One could also argue that biochemistry, genetics, and genomics are just three different perspectives for studying living systems and the molecular forces driving their behavior. Each focuses on questions of a different scale and each one relies on the insights and advances of the other. As an example, my lab studies the malaria parasite, Plasmodium falciparum. Three different questions associated with studying the emergence of artimisinin resistant parasites in South East Asia might be: Genomics: What is different between wild type and resistant populations when looking at their genomes, transcriptomes, proteomes, and metabolomes? Genetics: Can we determine the functional role of the genes involves in the pathways identified via genomic methods by genetically manipulating the parasite? Biochemistry: Can we determine the mechanism behind the parasite’s ability to persevere through drug treatment through targets molecular assays? Each question is looking to understand aspects of the emergence of drug resistance in the parasite, but with varying levels of specificity. Genomics tends to be the most comprehensive and biochemistry the most detail oriented as you get closer to the physical interactions between individual molecules. 2. Compared to the compact genomes of microbes, what are challenges and complications that arise when working with large genomes such as those of humans? The annotation of microbial genomes is largely a gene-finding exercise as ~90% of their genomes are genes. In vertebrates however, the majority of the DNA does not code for proteins leaving many to initially claim that the majority of the human genome was made up of so called “junk DNA.” We know now that this isn’t the case as we’re finding many regions of the human genome that do not code for proteins that have alternative functions that are also subject to evolutionary forces and can ultimately have strong effects on phenotype. Looking at the differences between prokaryotes and eukaryotes big differences include: Circular and uncompacted DNA in prokaryotes versus DNA compacted into linear chromosomes as chromatin in eukaryotes Polycistronic and intron-less transcripts in prokaryotes versus monocistronic and intron rich transcripts in eukaryotes Genomic reactions occurring in the cytosol in prokaryotes whereas in eukaryotes the genome sits behind the nuclear membrane inside the nucleus 3. Eric Lander discusses many accomplishments and insights in his article “Initial impact of the sequencing of the human genome.” Choose one and discuss why it is important and interesting to you. In regards to insights described by Lander, the one that stands out most to me is the proportion of the genome that is actively transcribed. Some studies suggest that up to ~80% of the human genome is actively transcribed. In Plasmodium falciparum that number is closer to 90%. Contrast this with the initial claim that the majority of the human genome was made up of so-called “junk DNA” and it makes for a very unexpected discovery. Furthermore, every discovery of a newly transcribed region of the genome leads to the characterization of a new type of RNA molecule as well. The world of RNA biology has become far more important as many types of novel short and long non-coding RNAs have been proven functional. Five years later, it’s still yet to be determined how to separate signal from noise in deep transcriptome sequencing data. In regards to the new frontiers listed at the end of the paper, what excites me most is the ability to learn to program cells. Synthetic biology is an emerging discipline that looks to create a different breed of biological engineers that look to create predictable cellular phenotypes using nucleotides rather than computer code. I’m a firm believer in Richard Feynman’s quote, “What I cannot build, I do not understand” and I believe a true understanding of cells and their complex molecular machinery will not be achieved until we understand how to manipulate them in a predictable manner. The genomics era is looking to generate the data we need to gain key insights into doing so. "],
["lesson3.html", "3 DNA sequencing 3.1 Learning Objectives 3.2 Assignment", " 3 DNA sequencing 3.1 Learning Objectives Explain the basic approaches to sequencing DNA. Use common sequence file formats such as fasta and fastq Understand quality scores for base calls Discuss major advances and limitations of second generation sequencing 3.2 Assignment 1. Read a sequence from the electrophoretic separation of the products of Sanger sequencing. In this image from Fig. 3 of the Sanger et al. (1977) paper, read the sequence yourself for at least 80 nucleotides. Note that there are two different chain termination reactions specific for C. Then look at the sequence in the figure and evaluate how well you read it. What is the most frequent source of errors? Figure 3.1: Adapted from Sanger et al. 1977 Reading through the sequence myself is very difficult. The most frequent sources of error are an incorrect base call or incorrect number of nucleotides that make up a polynucleotide track. It’s difficult with the gel resolution to interpret how many nucleotides occur in a row before the first change. It’s also sometimes difficult to tell whether one band has a greater intensity than another if we look by eye (F. Sanger and Coulson 1977). 2. What are the major differences between first generation sequencing (e.g. Sanger sequencing either manually or automated) and second (“next”) generation sequencing. You should discuss both conceptual differences (fundamental differences in approach) and practical consequences. The major differences between first and second generation sequencing involve how DNA fragments are isolated, the amplification of genomic material, the sequencing approach, and the method of detection. In regards to making copies of the genomic material, for first generation sequencing DNA fragments are cloned using plasmids transformed into bacterial colonies and using their machinery to make copies of the engineered vector. For second generation sequencing, DNA fragments are “cloned” in vitro using variants of the polymerase chain reaction. As a result, there is no need for plasmid vectors in second generation sequencing nor the need to grow bacterial colonies. In regards to the sequencing approach, if we look at automated Sanger sequencing and Illumina/Solexa sequencing approaches, they are very similar in that they both utilize the sequencing-by-synthesis approach using fluorescently labeled dNTPs. The major difference in the chemistry involves whether dideoxynucleotides are used. In first generation sequencing, synthesis is terminated once a fluorescently labeled nucleotide is incorporated. However, in second generation sequencing, this is not the case as a fluorescent marker is cleaved when the dNTP is incorporated into the nascent dsDNA fragment. This in turn leads us into the difference in detection methodology. In first generation sequencing, electrophoresis is needed to separate the fragments by size and detect the florescent labels found in each fragment following base incorporation. In second generation sequencing, bases are detected “in real time” as they are incorporated at the ends of each fragment for each cycle. The fluorescent signal that comes off as each dNTP is flowed through a flow cell is what the sequencer designates as the incorporated nucleotide. As a consequence of these difference we see two major differences in the output between the two generations. Although we are able to massively increase the actual amount of DNA molecules that we can “read” in one round of sequencing, the read lengths are much shorter, due to the chemistry of the reactions taking place. While it’s common to see read lengths of several hundred and even greater than one thousand nucleotides using first generation sequencing, read lengths are typically on the order of one to three hundred nucleotides using variants of Illumina’s platforms. Pacific Biosciences (PacBio) is a company that utilizes slighty different methodologies and hopes to alleviate this trade off by continuing to offer massively parallel sequencing of many DNA molecules at once without sacrificing read length. The result thus far has been a decrease in the overall output quantified by number of reads, but also a much higher read length, even than first generation methods. However, the new methodology comes with its own trade offs that include a lack of accuracy in individual base calls. This has resulted in most researchers utilizing PacBio in parallel with Illumina to generate high quality draft assemblies and correct for errors in previous sequencing runs. This has been most useful for assembling and annotated genomes. References "],
["lesson4.html", "4 Aligning biological sequences 4.1 Learning Objectives 4.2 Assignment 4.3 Additional Resources", " 4 Aligning biological sequences 4.1 Learning Objectives Explain basic approaches to aligning nucleic acid sequences Distinguish between local and global alignments Apply local and global alignments to different applications Develop facility with popular online alignment tools 4.2 Assignment Although the assignment asks you to perform the tasks using tools found in Galaxy, the same algorithms are implimented in the R programming language. I will be using strictly R and packages curated by the Bioconductor community. Considering that Galaxy acts as a wrapper for tools commonly used in R and the command line, I do not expect the results to be different. First let’s import the data into R. seqs &lt;- readAAStringSet(filepath = &quot;data/lesson4/all.fasta&quot;) 1.1 What are the lengths of the four protein sequences? To manipulate sequences in R, we can use the Biostrings package. To find out the lengths we can use the width() function. for (i in 1:length(seqs)) {cat(&quot;Length: &quot;,width(seqs[i]),&quot; Name: &quot;, names(seqs[i]),&quot;\\n&quot;)} ## Length: 358 Name: sp|P46099|KLF1_MOUSE ## Length: 283 Name: sp|O08584|KLF6_MOUSE ## Length: 283 Name: gi|37655157|KLF6_HUMAN ## Length: 362 Name: sp|Q13351|KLF1_HUMAN 1.2 What is the definition of local alignment and global alignment? How are they different? A sequence alignment represents an alignment between two or more sequences of DNA, RNA, or amino acids. There are several ways to align sequences. Two methods for doing so are known as global alignment and local alignment. Global Alignment attempts to align all sequences from end to end of the sequences being compared. This is useful when we are looking to compare highly similar sequences. Local Alignment attempts to align subsequences within longer sequences that have retained functionally conserved regions or domains whereas less conserved portions of the sequence have lost a majority of their similarity. This is useful when comparing more distantly related sequences that can likely no longer be compared from end to end, but rather only in their most conserved regions. Local alignment is very similar to global alignment except that we remove the restriction that we need to align the two sequences end to end. There is no pentaly for unaligned sequences surrounding the aligned subsequence. In reference to the traceback path, for a global alignment we follow a path from sink back to the source node that maximizes our score. For a local alignment, we instead set the sink to the highest scoring node and trace back from there to find the source. 1.3A How do the results of global and local alignment look for orthologous comparisons? We can figure this out by comparing two orthologous proteins in our set of sequences. Specifically, we’ll look to align Human KLF1 and Mouse KLF1. We can use the pairwiseAlignment() function from the Biostrings package. First we will compare the global alignments. We will use the BLOSUM62 substitution matrix since that is what’s used in the EMBOSS suite by default [Henikoff &amp; Henikoff]. We will also set the gap opening and gap extension penalties to that of EMBOSS to make sure our results match. Global Alignment human_klf1 &lt;- seqs[4] mouse_klf1 &lt;- seqs[1] data(BLOSUM62) mat &lt;- &quot;BLOSUM62&quot; galn &lt;- pairwiseAlignment(human_klf1, mouse_klf1, type = &quot;global&quot;, substitutionMatrix = mat, gapOpening = 10, gapExtension = 0.5) writePairwiseAlignments(galn, Matrix = mat, block.width = 40) ## ######################################## ## # Program: Biostrings (version 2.40.2), a Bioconductor package ## # Rundate: Thu Jul 14 21:22:11 2016 ## ######################################## ## #======================================= ## # ## # Aligned_sequences: 2 ## # 1: sp|Q13351|KLF1_HUMAN ## # 2: sp|P46099|KLF1_MOUSE ## # Matrix: BLOSUM62 ## # Gap_penalty: 10.5 ## # Extend_penalty: 0.5 ## # ## # Length: 366 ## # Identity: 259/366 (70.8%) ## # Similarity: NA/366 (NA%) ## # Gaps: 12/366 (3.3%) ## # Score: 1354 ## # ## # ## #======================================= ## ## sp|Q13351|KLF1_HUMAN 1 MATAETALPSISTLTALGPFPDTQDDFLKWWRSEEAQDMG 40 ## || ||| |||||||| || | ||| |||||||||| || | ## sp|P46099|KLF1_MOUSE 1 MASAETVLPSISTLTTLGQFLDTQEDFLKWWRSEETQDLG 40 ## ## sp|Q13351|KLF1_HUMAN 41 PGPPDPTEPPLHV--KSEDQPGEEEDDERGADATWDLDLL 78 ## |||| || | ||| |||| || |||| || || ## sp|P46099|KLF1_MOUSE 41 PGPPNPTGPSLHVSLKSEDPSGE--DDERDVTCAWDPDLF 78 ## ## sp|Q13351|KLF1_HUMAN 79 LTNFSGPEPGGAPQTCALAPSEASGAQYPPPPETLGAYAG 118 ## |||| | | | ||||||| || || | |||||| ## sp|P46099|KLF1_MOUSE 79 LTNFPGSESPGTSRTCALAPSVGPVAQFEPP-ESLGAYAG 117 ## ## sp|Q13351|KLF1_HUMAN 119 GPGLVAGLLGSEDHSGWVRPALRARAPDAFVGPALAPAPA 158 ## ||||| | |||| | | | | || || ||||| | ## sp|P46099|KLF1_MOUSE 118 GPGLVTGPLGSEEHTSWAHPTPRPPAPEPFVAPALAPGLA 157 ## ## sp|Q13351|KLF1_HUMAN 159 PEPKALALQPVYPGPGAGSSGGYFPRTGLSVPAASGAPYG 198 ## | || | ||| || ||| || |||| ||||| ## sp|P46099|KLF1_MOUSE 158 PKA-----QPSYSDSRAGSVGGFFPRAGLAVPAAPGAPYG 192 ## ## sp|Q13351|KLF1_HUMAN 199 LLSGYPAMYPAPQYQGHFQLFRGLQGPAPGPATSPSFLSC 238 ## ||||||| |||||||||||||||| | | |||| | ## sp|P46099|KLF1_MOUSE 193 LLSGYPALYPAPQYQGHFQLFRGLAAPSAGGTAPPSFLNC 232 ## ## sp|Q13351|KLF1_HUMAN 239 LGPGTVGTGLGGTA--EDPGVIAETAPSKRGRRSWARKRQ 276 ## |||||| | || || | | ||| || || | ||| ## sp|P46099|KLF1_MOUSE 233 LGPGTVATELGATAIAGDAGLSPGTAPPKRSRRTLAPKRQ 272 ## ## sp|Q13351|KLF1_HUMAN 277 AAHTCAHPGCGKSYTKSSHLKAHLRTHTGEKPYACTWEGC 316 ## ||||| | |||||| |||||||||||||||||||| | || ## sp|P46099|KLF1_MOUSE 273 AAHTCGHEGCGKSYSKSSHLKAHLRTHTGEKPYACSWDGC 312 ## ## sp|Q13351|KLF1_HUMAN 317 GWRFARSDELTRHYRKHTGQRPFRCQLCPRAFSRSDHLAL 356 ## |||||||||||||||||| ||| | |||||||||||||| ## sp|P46099|KLF1_MOUSE 313 DWRFARSDELTRHYRKHTGHRPFCCGLCPRAFSRSDHLAL 352 ## ## sp|Q13351|KLF1_HUMAN 357 HMKRHL 362 ## |||||| ## sp|P46099|KLF1_MOUSE 353 HMKRHL 358 ## ## ## #--------------------------------------- ## #--------------------------------------- We can easily see that there is a strong relationship between these two sequences based on the very high alignment score and percent identity. Visually we can assess this by noting the vertical black bars that run between matching amino acids. What does it look like if we do a local alignment? Local Alignment laln &lt;- pairwiseAlignment(human_klf1, mouse_klf1, type = &quot;local&quot;, substitutionMatrix = mat, gapOpening = 10, gapExtension = 0.5) writePairwiseAlignments(laln, Matrix = mat, block.width = 40) ## ######################################## ## # Program: Biostrings (version 2.40.2), a Bioconductor package ## # Rundate: Thu Jul 14 21:22:11 2016 ## ######################################## ## #======================================= ## # ## # Aligned_sequences: 2 ## # 1: sp|Q13351|KLF1_HUMAN ## # 2: sp|P46099|KLF1_MOUSE ## # Matrix: BLOSUM62 ## # Gap_penalty: 10.5 ## # Extend_penalty: 0.5 ## # ## # Length: 366 ## # Identity: 259/366 (70.8%) ## # Similarity: NA/366 (NA%) ## # Gaps: 12/366 (3.3%) ## # Score: 1354 ## # ## # ## #======================================= ## ## sp|Q13351|KLF1_HUMAN 1 MATAETALPSISTLTALGPFPDTQDDFLKWWRSEEAQDMG 40 ## || ||| |||||||| || | ||| |||||||||| || | ## sp|P46099|KLF1_MOUSE 1 MASAETVLPSISTLTTLGQFLDTQEDFLKWWRSEETQDLG 40 ## ## sp|Q13351|KLF1_HUMAN 41 PGPPDPTEPPLHV--KSEDQPGEEEDDERGADATWDLDLL 78 ## |||| || | ||| |||| || |||| || || ## sp|P46099|KLF1_MOUSE 41 PGPPNPTGPSLHVSLKSEDPSGE--DDERDVTCAWDPDLF 78 ## ## sp|Q13351|KLF1_HUMAN 79 LTNFSGPEPGGAPQTCALAPSEASGAQYPPPPETLGAYAG 118 ## |||| | | | ||||||| || || | |||||| ## sp|P46099|KLF1_MOUSE 79 LTNFPGSESPGTSRTCALAPSVGPVAQFEPP-ESLGAYAG 117 ## ## sp|Q13351|KLF1_HUMAN 119 GPGLVAGLLGSEDHSGWVRPALRARAPDAFVGPALAPAPA 158 ## ||||| | |||| | | | | || || ||||| | ## sp|P46099|KLF1_MOUSE 118 GPGLVTGPLGSEEHTSWAHPTPRPPAPEPFVAPALAPGLA 157 ## ## sp|Q13351|KLF1_HUMAN 159 PEPKALALQPVYPGPGAGSSGGYFPRTGLSVPAASGAPYG 198 ## | || | ||| || ||| || |||| ||||| ## sp|P46099|KLF1_MOUSE 158 PKA-----QPSYSDSRAGSVGGFFPRAGLAVPAAPGAPYG 192 ## ## sp|Q13351|KLF1_HUMAN 199 LLSGYPAMYPAPQYQGHFQLFRGLQGPAPGPATSPSFLSC 238 ## ||||||| |||||||||||||||| | | |||| | ## sp|P46099|KLF1_MOUSE 193 LLSGYPALYPAPQYQGHFQLFRGLAAPSAGGTAPPSFLNC 232 ## ## sp|Q13351|KLF1_HUMAN 239 LGPGTVGTGLGGTA--EDPGVIAETAPSKRGRRSWARKRQ 276 ## |||||| | || || | | ||| || || | ||| ## sp|P46099|KLF1_MOUSE 233 LGPGTVATELGATAIAGDAGLSPGTAPPKRSRRTLAPKRQ 272 ## ## sp|Q13351|KLF1_HUMAN 277 AAHTCAHPGCGKSYTKSSHLKAHLRTHTGEKPYACTWEGC 316 ## ||||| | |||||| |||||||||||||||||||| | || ## sp|P46099|KLF1_MOUSE 273 AAHTCGHEGCGKSYSKSSHLKAHLRTHTGEKPYACSWDGC 312 ## ## sp|Q13351|KLF1_HUMAN 317 GWRFARSDELTRHYRKHTGQRPFRCQLCPRAFSRSDHLAL 356 ## |||||||||||||||||| ||| | |||||||||||||| ## sp|P46099|KLF1_MOUSE 313 DWRFARSDELTRHYRKHTGHRPFCCGLCPRAFSRSDHLAL 352 ## ## sp|Q13351|KLF1_HUMAN 357 HMKRHL 362 ## |||||| ## sp|P46099|KLF1_MOUSE 353 HMKRHL 358 ## ## ## #--------------------------------------- ## #--------------------------------------- What we can see from the results above is that the alignments are almost exactly the same regardless of using global or local alignments for closely related orthologous sequences. Using EMBOSS Below are the results from using EMBOSS Needle. #======================================= # # Aligned_sequences: 2 # 1: KLF1_MOUSE # 2: KLF1_HUMAN # Matrix: EBLOSUM62 # Gap_penalty: 10.0 # Extend_penalty: 0.5 # # Length: 366 # Identity: 259/366 (70.8%) # Similarity: 280/366 (76.5%) # Gaps: 12/366 ( 3.3%) # Score: 1356.5 # # #======================================= KLF1_MOUSE 1 MASAETVLPSISTLTTLGQFLDTQEDFLKWWRSEETQDLGPGPPNPTGPS 50 ||:|||.||||||||.||.|.|||:||||||||||.||:|||||:||.|. KLF1_HUMAN 1 MATAETALPSISTLTALGPFPDTQDDFLKWWRSEEAQDMGPGPPDPTEPP 50 KLF1_MOUSE 51 LHVSLKSEDPSG--EDDERDVTCAWDPDLFLTNFPGSESPGTSRTCALAP 98 ||| ||||..| |||||.....||.||.||||.|.|..|..:|||||| KLF1_HUMAN 51 LHV--KSEDQPGEEEDDERGADATWDLDLLLTNFSGPEPGGAPQTCALAP 98 KLF1_MOUSE 99 SVGPVAQF-EPPESLGAYAGGPGLVTGPLGSEEHTSWAHPTPRPPAPEPF 147 |....||: .|||:|||||||||||.|.||||:|:.|..|..|..||:.| KLF1_HUMAN 99 SEASGAQYPPPPETLGAYAGGPGLVAGLLGSEDHSGWVRPALRARAPDAF 148 KLF1_MOUSE 148 VAPALAPGLAPK-----AQPSYSDSRAGSVGGFFPRAGLAVPAAPGAPYG 192 |.|||||..||: .||.|....|||.||:|||.||:||||.||||| KLF1_HUMAN 149 VGPALAPAPAPEPKALALQPVYPGPGAGSSGGYFPRTGLSVPAASGAPYG 198 KLF1_MOUSE 193 LLSGYPALYPAPQYQGHFQLFRGLAAPSAGGTAPPSFLNCLGPGTVATEL 242 |||||||:||||||||||||||||..|:.|....||||:|||||||.|.| KLF1_HUMAN 199 LLSGYPAMYPAPQYQGHFQLFRGLQGPAPGPATSPSFLSCLGPGTVGTGL 248 KLF1_MOUSE 243 GATAIAGDAGLSPGTAPPKRSRRTLAPKRQAAHTCGHEGCGKSYSKSSHL 292 |.| |.|.|:...|||.||.||:.|.||||||||.|.||||||:||||| KLF1_HUMAN 249 GGT--AEDPGVIAETAPSKRGRRSWARKRQAAHTCAHPGCGKSYTKSSHL 296 KLF1_MOUSE 293 KAHLRTHTGEKPYACSWDGCDWRFARSDELTRHYRKHTGHRPFCCGLCPR 342 |||||||||||||||:|:||.||||||||||||||||||.|||.|.|||| KLF1_HUMAN 297 KAHLRTHTGEKPYACTWEGCGWRFARSDELTRHYRKHTGQRPFRCQLCPR 346 KLF1_MOUSE 343 AFSRSDHLALHMKRHL 358 |||||||||||||||| KLF1_HUMAN 347 AFSRSDHLALHMKRHL 362 #--------------------------------------- #--------------------------------------- Below are the results of EMBOSS Water. #======================================= # # Aligned_sequences: 2 # 1: KLF1_MOUSE # 2: KLF1_HUMAN # Matrix: EBLOSUM62 # Gap_penalty: 10.0 # Extend_penalty: 0.5 # # Length: 366 # Identity: 259/366 (70.8%) # Similarity: 280/366 (76.5%) # Gaps: 12/366 ( 3.3%) # Score: 1356.5 # # #======================================= KLF1_MOUSE 1 MASAETVLPSISTLTTLGQFLDTQEDFLKWWRSEETQDLGPGPPNPTGPS 50 ||:|||.||||||||.||.|.|||:||||||||||.||:|||||:||.|. KLF1_HUMAN 1 MATAETALPSISTLTALGPFPDTQDDFLKWWRSEEAQDMGPGPPDPTEPP 50 KLF1_MOUSE 51 LHVSLKSEDPSG--EDDERDVTCAWDPDLFLTNFPGSESPGTSRTCALAP 98 ||| ||||..| |||||.....||.||.||||.|.|..|..:|||||| KLF1_HUMAN 51 LHV--KSEDQPGEEEDDERGADATWDLDLLLTNFSGPEPGGAPQTCALAP 98 KLF1_MOUSE 99 SVGPVAQF-EPPESLGAYAGGPGLVTGPLGSEEHTSWAHPTPRPPAPEPF 147 |....||: .|||:|||||||||||.|.||||:|:.|..|..|..||:.| KLF1_HUMAN 99 SEASGAQYPPPPETLGAYAGGPGLVAGLLGSEDHSGWVRPALRARAPDAF 148 KLF1_MOUSE 148 VAPALAPGLAPK-----AQPSYSDSRAGSVGGFFPRAGLAVPAAPGAPYG 192 |.|||||..||: .||.|....|||.||:|||.||:||||.||||| KLF1_HUMAN 149 VGPALAPAPAPEPKALALQPVYPGPGAGSSGGYFPRTGLSVPAASGAPYG 198 KLF1_MOUSE 193 LLSGYPALYPAPQYQGHFQLFRGLAAPSAGGTAPPSFLNCLGPGTVATEL 242 |||||||:||||||||||||||||..|:.|....||||:|||||||.|.| KLF1_HUMAN 199 LLSGYPAMYPAPQYQGHFQLFRGLQGPAPGPATSPSFLSCLGPGTVGTGL 248 KLF1_MOUSE 243 GATAIAGDAGLSPGTAPPKRSRRTLAPKRQAAHTCGHEGCGKSYSKSSHL 292 |.| |.|.|:...|||.||.||:.|.||||||||.|.||||||:||||| KLF1_HUMAN 249 GGT--AEDPGVIAETAPSKRGRRSWARKRQAAHTCAHPGCGKSYTKSSHL 296 KLF1_MOUSE 293 KAHLRTHTGEKPYACSWDGCDWRFARSDELTRHYRKHTGHRPFCCGLCPR 342 |||||||||||||||:|:||.||||||||||||||||||.|||.|.|||| KLF1_HUMAN 297 KAHLRTHTGEKPYACTWEGCGWRFARSDELTRHYRKHTGQRPFRCQLCPR 346 KLF1_MOUSE 343 AFSRSDHLALHMKRHL 358 |||||||||||||||| KLF1_HUMAN 347 AFSRSDHLALHMKRHL 362 #--------------------------------------- #--------------------------------------- It’s nice to see that our results match exactly with the implementation of the algorithms in Biostrings. However, there are two (related) differences in the outputs. Numerically, it’s the calculation of percent similarity. Visually, this is represented by the periods and colons in the EMBOSS output. These periods and colons represent conservative and semi-conservative mutations. That is, based on the alignment, these amino acids are assumed to be substitutions. When amino acids of relative chemical similarity align, they can be considered conservative or semi-conservative matches. I could not find where in the EMBOSS Needle or Water programs these relationships were defined, but I could find it by looking into the Clustal Omega documentation. Here it tells us that these relationships are defined (for ClustalO) by scores between amino acids in the Gonnet PAM 250 matrix. That is: A : (colon) indicates conservation between groups of strongly similar properties - scoring &gt; 0.5 in the Gonnet PAM 250 matrix. A . (period) indicates conservation between groups of weakly similar properties - scoring =&lt; 0.5 in the Gonnet PAM 250 matrix. Percent similarity is calculated using includes conservative and semi-conservative hits while percent identity only uses exact matches in its calculation. This is why we don’t see this output above using Biostrings. However, I plan on writing a function myself to provide R with this functionality as well since it shouldn’t be too difficult as long as we define what we mean by “similar.” Conclusions When comparing sequences it’s important to consider which type of alignment (global or local), the scoring mechanism (gap open and gap exstension penalties), and the substitution matrices. Above I decided to use the EMBOSS default, BLOSUM62, but there are many other options that depend mostly on the relationship between the two sequences. The PAM substitution matrices were created by Dayhoff et al. and were based on closely related sequences. To compare more distantly related proteins they simply extrapolated outward by multiplying the matrix by itself. Thus, the PAM 250 matrix is a result of multiplying PAM 1 by itself 250 times. In practice however, it was noted that this assumption did not always hold for distantly related proteins and thus the BLOSUM substitution matrix was developed. For more information comparing the two approaches, there is a helpful Wikipedia article. 1.3B How do the results of global and local alignment look for paralogous comparisons? Now that we are interested in paralogous sequences let’s look at KLF1 and KLF6 in humans. Global Alignment human_klf1 &lt;- seqs[4] human_klf6 &lt;- seqs[3] data(BLOSUM62) mat &lt;- &quot;BLOSUM62&quot; galn &lt;- pairwiseAlignment(human_klf1, human_klf6, type = &quot;global&quot;, substitutionMatrix = mat, gapOpening = 10, gapExtension = 0.5) writePairwiseAlignments(galn, Matrix = mat, block.width = 40) ## ######################################## ## # Program: Biostrings (version 2.40.2), a Bioconductor package ## # Rundate: Thu Jul 14 21:22:11 2016 ## ######################################## ## #======================================= ## # ## # Aligned_sequences: 2 ## # 1: sp|Q13351|KLF1_HUMAN ## # 2: gi|37655157|KLF6_HUMAN ## # Matrix: BLOSUM62 ## # Gap_penalty: 10.5 ## # Extend_penalty: 0.5 ## # ## # Length: 387 ## # Identity: 117/387 (30.2%) ## # Similarity: NA/387 (NA%) ## # Gaps: 129/387 (33.3%) ## # Score: 376.5 ## # ## # ## #======================================= ## ## sp|Q13351|KLF1_HUMAN 1 MATAE-----------------TALPSISTLTALGPFPDT 23 ## | |||| | ## gi|37655157|KLF6_HUMAN 1 MDVLPMCSIFQELQIVHETGYFSALPSLEEY-----WQQT 35 ## ## sp|Q13351|KLF1_HUMAN 24 QDDFLKWWRSEEAQDMGPGPPDPTEPPLHVKSEDQPGEEE 63 ## || | | ## gi|37655157|KLF6_HUMAN 36 CLELERYLQSE---------------PCYVSASEIKFDSQ 60 ## ## sp|Q13351|KLF1_HUMAN 64 DDERGADATWDLDLLLTNFSGPEPGGAPQTCALAPSEASG 103 ## | | | | | | ## gi|37655157|KLF6_HUMAN 61 ED------LWTKIIL----------------AREKKEESE 78 ## ## sp|Q13351|KLF1_HUMAN 104 AQYP--PPPETLGAYAGGPGLVAGLLGSE------DHSGW 135 ## || || | | | | | ## gi|37655157|KLF6_HUMAN 79 LKISSSPPEDTLISPSFCYNLETNSLNSDVSSESSDSSEE 118 ## ## sp|Q13351|KLF1_HUMAN 136 VRPALRARAPDAFVGPALAPAPAPEPKALALQPVYPGPGA 175 ## | | | ## gi|37655157|KLF6_HUMAN 119 LSPTAKFTSDP--IGEVLV--------------------- 135 ## ## sp|Q13351|KLF1_HUMAN 176 GSSGGYFPRTGLSVPAASGAPYGLLSGYPAMYPAPQYQGH 215 ## | | | | | || | ## gi|37655157|KLF6_HUMAN 136 --SSGKLSSSVTSTPPSSPE----LSREPSQ--------- 160 ## ## sp|Q13351|KLF1_HUMAN 216 FQLFRGLQGPAPGPATSPSFLSCLGPGTVGTGLGGTAEDP 255 ## | | || || | | | | | ## gi|37655157|KLF6_HUMAN 161 ------LWGCVPGELPSP--------GKVRSGTSGKPGDK 186 ## ## sp|Q13351|KLF1_HUMAN 256 GVIAETAPSKRGRRSWARKRQAAHTCAHPGCGKSYTKSSH 295 ## | | | | | | || | |||||| ## gi|37655157|KLF6_HUMAN 187 GN-GDASPDGRRR---------VHRCHFNGCRKVYTKSSH 216 ## ## sp|Q13351|KLF1_HUMAN 296 LKAHLRTHTGEKPYACTWEGCGWRFARSDELTRHYRKHTG 335 ## |||| ||||||||| | |||| |||||||||||| ||||| ## gi|37655157|KLF6_HUMAN 217 LKAHQRTHTGEKPYRCSWEGCEWRFARSDELTRHFRKHTG 256 ## ## sp|Q13351|KLF1_HUMAN 336 QRPFRCQLCPRAFSRSDHLALHMKRHL 362 ## || | | | ||||||||||||||| ## gi|37655157|KLF6_HUMAN 257 AKPFKCSHCDRCFSRSDHLALHMKRHL 283 ## ## ## #--------------------------------------- ## #--------------------------------------- We can immediately see that the percent identity is much lower and there are far more gaps when trying to perform a global alignment. If we look closely we can see a highly conserved region towards the end of both proteins. If we had looked for simply the percent identity or similarity using a global alignment, it’s unlikely that this comparison would have stood out as significant, highlighting the principle weakness of using global alignment. Local Alignment laln &lt;- pairwiseAlignment(human_klf1, human_klf6, type = &quot;local&quot;, substitutionMatrix = mat, gapOpening = 10, gapExtension = 0.5) writePairwiseAlignments(laln, Matrix = mat, block.width = 40) ## ######################################## ## # Program: Biostrings (version 2.40.2), a Bioconductor package ## # Rundate: Thu Jul 14 21:22:11 2016 ## ######################################## ## #======================================= ## # ## # Aligned_sequences: 2 ## # 1: sp|Q13351|KLF1_HUMAN ## # 2: gi|37655157|KLF6_HUMAN ## # Matrix: BLOSUM62 ## # Gap_penalty: 10.5 ## # Extend_penalty: 0.5 ## # ## # Length: 141 ## # Identity: 81/141 (57.4%) ## # Similarity: NA/141 (NA%) ## # Gaps: 18/141 (12.8%) ## # Score: 411 ## # ## # ## #======================================= ## ## sp|Q13351|KLF1_HUMAN 222 LQGPAPGPATSPSFLSCLGPGTVGTGLGGTAEDPGVIAET 261 ## | | || || | | | | | | ## gi|37655157|KLF6_HUMAN 161 LWGCVPGELPSP--------GKVRSGTSGKPGDKGN-GDA 191 ## ## sp|Q13351|KLF1_HUMAN 262 APSKRGRRSWARKRQAAHTCAHPGCGKSYTKSSHLKAHLR 301 ## | | | | | || | |||||||||| | ## gi|37655157|KLF6_HUMAN 192 SPDGRRR---------VHRCHFNGCRKVYTKSSHLKAHQR 222 ## ## sp|Q13351|KLF1_HUMAN 302 THTGEKPYACTWEGCGWRFARSDELTRHYRKHTGQRPFRC 341 ## |||||||| | |||| |||||||||||| ||||| || | ## gi|37655157|KLF6_HUMAN 223 THTGEKPYRCSWEGCEWRFARSDELTRHFRKHTGAKPFKC 262 ## ## sp|Q13351|KLF1_HUMAN 342 QLCPRAFSRSDHLALHMKRHL 362 ## | | ||||||||||||||| ## gi|37655157|KLF6_HUMAN 263 SHCDRCFSRSDHLALHMKRHL 283 ## ## ## #--------------------------------------- ## #--------------------------------------- Here we can see that the local alignment gives us a more significant alignment. It highlights the C-terminal end of both proteins, which are known to contain the zinc finger domains common to all KLF proteins [Suske et al.]. We can also see, based on the alignment above, that the highly similar alignment region is about the right length as well. After playing with the parameters a bit, we get an even better alignment using the code below. Now we can really zoom in on the domains common to both proteins and maximize the percent similarity since we can see that there are relatively few gaps in the alignment above within this region. laln &lt;- pairwiseAlignment(human_klf1, human_klf6, type = &quot;local&quot;, substitutionMatrix = &quot;BLOSUM80&quot;, gapOpening = 10, gapExtension = 5) writePairwiseAlignments(laln, Matrix = mat, block.width = 40) ## ######################################## ## # Program: Biostrings (version 2.40.2), a Bioconductor package ## # Rundate: Thu Jul 14 21:22:11 2016 ## ######################################## ## #======================================= ## # ## # Aligned_sequences: 2 ## # 1: sp|Q13351|KLF1_HUMAN ## # 2: gi|37655157|KLF6_HUMAN ## # Matrix: BLOSUM62 ## # Gap_penalty: 15.0 ## # Extend_penalty: 5.0 ## # ## # Length: 88 ## # Identity: 67/88 (76.1%) ## # Similarity: NA/88 (NA%) ## # Gaps: 0/88 (0.0%) ## # Score: 404 ## # ## # ## #======================================= ## ## sp|Q13351|KLF1_HUMAN 275 RQAAHTCAHPGCGKSYTKSSHLKAHLRTHTGEKPYACTWE 314 ## | | | || | |||||||||| ||||||||| | || ## gi|37655157|KLF6_HUMAN 196 RRRVHRCHFNGCRKVYTKSSHLKAHQRTHTGEKPYRCSWE 235 ## ## sp|Q13351|KLF1_HUMAN 315 GCGWRFARSDELTRHYRKHTGQRPFRCQLCPRAFSRSDHL 354 ## || |||||||||||| ||||| || | | | ||||||| ## gi|37655157|KLF6_HUMAN 236 GCEWRFARSDELTRHFRKHTGAKPFKCSHCDRCFSRSDHL 275 ## ## sp|Q13351|KLF1_HUMAN 355 ALHMKRHL 362 ## |||||||| ## gi|37655157|KLF6_HUMAN 276 ALHMKRHL 283 ## ## ## #--------------------------------------- ## #--------------------------------------- 4.2.1 1.3C What does this tell you about the conservation in different domains of the proteins? This tells me that potentially the only region of the protein family that’s essential for it to function as a zinc-finger protein are these three domains located near the C-terminal end. You can see that one copy of KFL is longer than another in humans, but the highly conserved domains extend towards the end of the C-terminal end of the protein meaning that the shorter protein lost part of its sequence more towards the N-terminal end where there are potentially non-essential sequences or domains. It’s evident that all three zing-finger domains are conserved between paralogous proteins as is also highlighted in the figure below. Figure 4.1: KLF Zinc Finger Multiple Alignment adapted from Oats et al (Andrew C. Oates 2001) For this exercise I downloaded the sequence for MJ0577 from Uniprot. 2.1A How long is the query, and how large is the database? The query is 162 amino acids. The database has 29,838,499,437 letters (amino acids) and 81,622,391 sequences. 2.1B What Matrix was used? Briefly describe. By default, the BLOSUM62 matrix was used, which expects these sequences to be 62% identical based on the time since their evolutionary divergence. 2.2A What are hits to database? What is a high-scoring segment pair (HSP)? What is the relationship between a “hit” and an HSP? BLAST is a heuristic that finds similar sequences within a database when compared to a query sequence. The key tradeoff that BLAST optimizes is the relationship between sensitivity and speed due to the fact that running a sensitive local alignment, for example, on every sequence within the NCBI non-redundant protein sequences database would take too long to run. In order to do so it first creates a list of “hits” to the database and then extends those hits into “high scoring segment pairs.” To create a list of hits it will split your query sequence into “words”, W, of a length one can input as a parameter. It will then create another list of “words”, W+, that match closely enough to the words within your query sequence based on some scoring threshold. It will then scan the database using the words in W+ for hits. Not all hits are eventually reported by BLAST because the final step is to extend those hits into what are called high-scoring segment pairs (HSP) based on another scoring threshold, S. These high-scoring segment pairs are what are then reported based on different cutoffs one can set such as an E-score. 2.2B What conditions must be met before a gapped extension is performed by BLAST2? A gapped extension is performed when there are two hits on the same diagonal of your dot plot within a certain distance from one another (in nucleotides) and extending the gap maintains a sufficiently high score. 2.3 Based on the results from the blast search, what might be the function of this “hypothetical protein MJ0577”? Please report this in your own words. If instead you choose to cut-and-paste from a description on a website, you must put it in quotes, and provide a reference(s) to the web site and any appropriate literature. Following the Uniprot link above to find the FASTA protein sequence tells me that the protein is a universal stress protein. I can also easily infer that this might be the case based on many of the HSPs returned by BLAST. NCBI BLAST also has a feature that looks into conserved protein domains found within your query sequence and performs a multiple alignemnt to confirm this hypothesis using closely related species. Below is an image of the multiple alignment. Figure 4.2: Multiple Alignment of MJ0577 To learn more about what a universal stress protein (USP) is we can follow this link. Here we learn that USPs are small, cytoplasmic, bacterial proteins that have “enhanced expression” during prolonged exposure to stress. 2.4 Run a few iterations of PSI-BLAST and describe what happens in terms of discovery of new matches and E values. I ran BLAST using the protein sequence for an ApiAP2 protein found in Plasmodium falciparum with the gene ID, PF3D7_1007700. Not much is known regarding this protein except that it has several DNA binding domains and has been implicated in the regulation of invasion-related genes. More information can be found here on PlasmoDB. My first attempt resulted in an error telling me that I had used too many compute resources. What this means, I’m not entirely sure but I think it speaks to the difficulty of having assigned putative functions to this family of transcription factors at all! I decided to use blastp instead of PSI-BLAST, used a BLOSUM45 scoring matrix in order to relax the assumption that the matches I was interested in were highly similar, and filtered low complexity regions due to alignments to those regions not being very meaningful and likely skewing our results. I received 500 hits (likely the maximum number of hits returned as set by an input parameter), many of which were to other Plasmodium ApiAP2 proteins. Some were found in other sequenced strains of falciparum, some in other species of Plasmodium, and some in other families of Apicomplexan parasites such as Toxoplasma, Bebesia, Eimeria, and Crytosporidium. Much of this is to be expected since we know of may orthologs. One interesting observation is that if I look at the predicted putative conserved domains on the protein in NCBI BLAST it shows that there are 2 AP2 binding domains. However, if I look on PlasmoDB, as can be found in the literature, there are 3 predicted AP2 DNA binding domains found on this protein. It’s been shown by PBM that each of these predicted binding domains due in fact bind double stranded DNA in vitro, but it hasn’t yet been shown where in the genome this protein is binding and when. Whether all three domains bind to the genome in vivo and in what combination has yet to be determined. The publication that first described their existence in Apicomplexans is Aravind et al.. 4.3 Additional Resources Little Book of R for Bioinformatics - Pairwise Sequence Alignment Conservative Mutation Biostrings - Pairwise Alignments Substitution Matrices References "],
["lesson5.html", "5 Genome databases and browsers 5.1 Learning Objectives 5.2 Assignment", " 5 Genome databases and browsers 5.1 Learning Objectives Identify genomics web resources Evaluate what browser to use for the genome of interest Use the browswer to navigate the genome of interest 5.2 Assignment For this assignment I will go over the features of the PlasmoDB genome browser, which can be used to explore the genomes of multiple species of Plasmodium parasites. Technology The genome browser found on PlasmoDB is built on top of the GBrowse open source framework. In other words, it’s a web-based genome browser unlike IGV, for example. On the backend there is a database server that can be used to access datasets similar to the way that you would access datasets using the UCSC genome browser. Data accessibility The data on PlasmoDB is not raw data, although the sources of the raw data are usually provided. In most cases PlasmoDB will process the data in some way in order to standardize it. Typically, updated annotations and sequence assemblies are taken from the latest updates on GeneDB, which is where the Plasmodium genomes are currently curated. This update occurs every several months, whereas the most up-to-date data sets can typically be found on GeneDB. The latest version of PlasmoDB is version 27, which was released on February 19th, 2016. Genome Assemblies Currently the only available genome assembly is the well curated draft genome of the 3D7 strain of Plasmodium falciparum. The first draft assembly was published in 2002 [Gardner et al.] and contains no ambiguous base pairs at this point. While there are many other assemblies available for download in FASTA format on both PlasmoDB and GeneDB, they are not currently as complete as the 3D7 reference strain and thus aren’t available using the PlasmoDB genome browser. One would have to download them separately and view them in IGV. Data tracks Similar to UCSC genome browser, one can select different tracks to be viewed at the same time, stacked on top of one another in order to compare a variety of data at once. Available tracks from recent publications include, but aren’t limited to, various strand-specific RNA-seq data, nucleosome occupancy data, and SNP data. These tracks are presented as annotation tracks or coverage tracks. Additional features Additional features include the ability to take snapshots to be exported and used in figures. You can directly email them or download them. Unfortunately you are limited to exporting saved snapshots in PNG format, which isn’t ideal or creating figures if that is your end goal. Last but not least, one can also add custom tracks by text, URL, or a local file. These can be in various formats including BAM, BigWig, GFF, and BED. The custom tracks get added just like any other track would and can be saved onto your account so you can load it any time you login. "],
["lesson6.html", "6 Genomics platforms 6.1 Learning Objectives 6.2 Assignment", " 6 Genomics platforms 6.1 Learning Objectives Become familiar with more tools and capabilities of Galaxy Analyze genomic data using different tools 6.2 Assignment To analyze data using Galaxy I used a Pennsylvania State University specific instance known as Tadpole. One needs an account to access it, but it does not use any tools that cannot be installed from the main Galaxy Toolshed. Thus, any tools that I explain I used can also be found in the main Galaxy instance. Now let’s get started. Analysis of Chromosome 14 of P. falciparum To demonstrate the utility of Galaxy I will show off a few tools that one can use to analyze Illumina whole genome sequencing data. This data was generated sepcifically on a HiSeq 2500 and is composed of 150 base-pair single-end reads. In order to keep it simple, we’ll just map the reads to chromosome 14 of the Plasmodium falciparum 3D7 reference genome. Downloading the data We can download the multi-FASTA file that contains the sequences for the reference genome from PlasmoDB. We’ll use the genome found under version 27. We need to download our FASTA file beforehand because Tadpole does not have locally cached genome files. Not a problem, since these genomes are relatively small and building an index on the fly does not take much time. Uploading the data Next we will look under “Get Data” and use the “Upload File” tool to load our genome file into our history. Figure 6.1: Upload File Tool We will also upload our FASTQ files which are stored as a Data Library on the Tadpole instance. A Data Library provide containers for data sets in Galaxy. An administrator needs to make it available to specific users prior to this being an option for the average user, but once that’s done, you have the option of loading those data sets directly into your history. Because the data set is already loaded into Galaxy this process is very fast and efficient. This especially useful if you want to automate the process of data retrieval and accessibility or if you want to share this data with other members of the same lab or collaborators. Quality control The next step in any NGS analysis is to somehow quantify different quality control measures for our raw reads. Questions we might be interested in include the quality of our base calls at each position (since these are Illumina reads each read is of the same length), the nucleotide content distribution, or whether there is possible contamination. A very useful and efficient tool for looking into these and many more potential issues is FastQC. In Figure 2 we can see that most of our quality metrics look alright we can move ahead to mapping these reads to our reference without performing any additional process such as trimming. Figure 6.2: FastQC Plot Mapping reads to a reference using BWA-MEM Next we need to decide which short read mapper we want to use to map our reads to the genome. Galaxy provides us with several options, two of which are very common: Bowtie2 and BWA-MEM. We’ll use BWA-MEM here because it’s slightly faster using the default parameters. Depending on the size of your data set this can take several hours to several weeks! Luckily, the Plasmodium genome is relatively small and we’re only interested in one chromosome so this will likely only take a few hours. Checking our mapping results using samtools We can initially check how many of our reads mapped successfully to the genome using samtools. Many other tools can be used as well, but samtools is very efficient and information-lite. It’s a perfect first pass of our data. The results are below: 13363234 + 0 in total (QC-passed reads + QC-failed reads) 0 + 0 duplicates 4613751 + 0 mapped (34.53%:-nan%) 0 + 0 paired in sequencing 0 + 0 read1 0 + 0 read2 0 + 0 properly paired (-nan%:-nan%) 0 + 0 with itself and mate mapped 0 + 0 singletons (-nan%:-nan%) 0 + 0 with mate mapped to a different chr 0 + 0 with mate mapped to a different chr (mapQ&gt;=5) The mapping percentages here look bad, but they’re actually quite high considering that the actual sample is taken from the entire genome! The whole genome is made of 16 total contigs (including one mitochondrial and one apicoplast genome). Of the 14 nuclear chromosomes, chromosome 14 is indeed the largest and thus should get the largest number of reads. The real question is how many reads should it get? The reference genome has 23332831 base pairs. Chromosome 14 has 3291936 base pairs. This leads to chromosome 14 containing 14.1% of the total number of base pairs in the genome. And yet we see here that 34.53% of the reads map to chromosome 14! It’s too soon to speak for whether this is to be expected or not. Additional things to look into are the average mapping quality of the reads and how many of them are multi-mapped reads. It’s possible also that any read that is mapping to a paralog present on another chromosome is now mapping to chromosome 14 since it is the closest thing to the fragment from which the read was derived. Coverage distribution Another good way of performing quality control on your alignment file is to plot a histogram of the coverage distribution. A great tool for that is deepTools plotCoverage. This will provide us not only with a plot of the genome coverage distribution, but also can tell us the mean coverage of our alignment file. Figure 6.3: Coverage Distribution All done! There’s a quick tutorial on mapping single-end short reads to a reference genome using Galaxy. "],
["lesson7.html", "7 Protein-coding genes 7.1 Learning Objectives 7.2 Assignment", " 7 Protein-coding genes 7.1 Learning Objectives Identify the number of protein-coding gene Explain how protein-coding genes are distributed along chromosomes. Show how to determine the function of protein-coding genes. Annotate genomes using both ab initio and evidence-based approaches Apply ab initio and evidence-based approaches to annotate genomes. 7.2 Assignment For this assignment and following assignments I will be looking at the genome of Chromera velia, a recently described unicellular eukaryote closely related phylogenetically to the Apicomplexa phylum of protozoan parasites. In a paper by Woo et al. 2015, they sequence and assemble the nuclear genomes of two, so-called, Chromerids, Chromera velia and Vitrella brassicaformis. Key questions revolve around the evolutionary emergence of the Apicomplexa considering the Chromerids represent the closest non-Apicomplexan relative. Here will only focus on Chromera. I will breifly describe its genome based on the paper mentioned above and attempt to use Augustus to predict gene sequences. A brief look at the Chromerid genome It’s important to note that the assembly I will be working is a draft assembly. It is made of 5953 scaffolds and totals 193.6 million base-pairs (Mb). The predicted number of protein-coding genes is 26,112 and the genome is estimated to be composed of ~30 Mb in transposable elements (TEs). This is an interesting finding considering that Plasmodium, for example, is known to have an exceptional dearth in transpoable elements. Thus, either the transposable elements that were present in the proto-Apicomplexan ancestor have been lost or repurposed. If we look at Supplementary table 2 in Woo et al., they note that 22.82% of the TEs fall under “Unclassified repeats”. This suggests the potential for novel TEs awaiting discovery within protist and potentially Apicomplexan genomes. Interestingly, in Vitrella, while the proporition of putative TEs is similar as in Chromera (27.24%), the genome is much smaller at 72.7 Mb. In addition, the Vitrella genome was assembled into much fewer scaffolds at 1064. Lastly, the number of protein-coding genes was not drastically different at 22,817 suggesting that there is far less intergenic space in Vitrella, similar to that in parasitic genomes of Apiceomplxan parasites. Choosing a gene of interest The genomic loci of interest in this study is going to be ~30kb on scaffold 27 of the Chromera assembly. This regions represents 10kb flanks surroundg the gene identified as Cvel_872. This gene was assigned the function of a striated fiber assemblin (SFA) protein, typically associated with basal body rootlets of the flagella. While all known components of the flagella were present in proto-apicomplexan ancestors (based on phyolgenetic analysis), most of the components have been lost as apicomplexan lineages began to differentiate. Thus, it’s been hypothesized that some flagellar-proteins have been repurposed for new functions in apicomplexans (Francia et al. 2012). In addition, Woo et al. preformed RNA-seq and compared the expression profiles of all genes in Chromera to all genes in Plasmodium falciparum. A statistically significant overlap in highly co-expressed orthogroups (orthologous gene clusters identified through sequence comparison) between falciparum invasion genes and the Chromera gene encoding SFA. Thus, it suggests an interesting hypothesis that elements of the flagellar apparatus have been repurposed as a module of the apical complex, an important organelle for invading host cells found only in Apicomplexan parasites. Here, I chose to use Augustus to predict the genes within 10kb nucleotide flanking regions up and downstream of the gene sequence encoding SFA itself, including the sequence of the gene encoding SFA, itself. Evaluating Augustus In Woo et al., they combined several approaches to predict genes in Chromera. They specifically used Augustus, a gene prediction software tool based on a Generalized Hidden Markov Model. In order to train the HMM they used Cufflinks derived transcript assemblies obtained from the RNA-seq experiments. If you don’t have transcript models to train the HMM, Augustus comes with dozens fo pretrained HMMs based on gene models in other organisms. Here I use Toxoplasm gondii as my gene model prediction organism. The snapshot in IGV represents my results. Figure 7.1: Augustus Gene Model Predictions. Gene models predicted in Woo et al. are in black; Augustus predictions without hints are in blue; Augustus preidctions with hints are in green. The red box represents the gene encoding SFA. What can see here is that Augustus is very good at predicting gene models ab initio. There is virtually no difference between the output when you compare the output with hints and without. There is, however, one general trend that plagues the accuracy of prediction, and that is premature stop codons, shown in Figure 2 below. Figure 7.2: Example of using the wrong reading frame to predict a stop codon. In Figure 2 we can see that Augustus chose to predict a CDS that doesn’t exist (the start of the thick bar) and terminate the CDS (start of the thin bar) prematurely due to an incorrect reading frame prediction. With alternatively spliced transcripts like these this is likely a common problem. However, overall it does a great job! Looking at Figure 1, we can confidentally say that have a generally idea of where genes are, how many exons they contain, and roughly where splice site junctions are located. We can use a program called gffcompare to quantify the similarity in our predictions. Accordingly, these predictions are about 70.5% accurate. The reason this number is lower than expected when looking at the figures is due to the partial predictions of genes at the edges. I did not choose the flanking regions with the knowledge of where genes were upsteam and downstream of SFA. Thus, the predictions can only go so far as to predict partial genes at the edges, which it does relatively well. Conclusions Augustus is a very accurate and useful tool to predict protein-coding genes in eukaryotic genomes, given the correct HMM training model. "],
["lesson8.html", "8 Transcribed regions in genomes 8.1 Learning Objectives 8.2 Notes 8.3 Assignment", " 8 Transcribed regions in genomes 8.1 Learning Objectives Identify how much of the genome is transcribed. Explain why certain transcribed regions do not code for proteins. Understand large-scale determination of gene expression patterns using hybridization to high-density gene arrays and new techniques such as RNA-seq. Discuss the rationale and features of applying the approaches of clustering analysis to these large data sets. 8.2 Notes 8.3 Assignment 8.3.1 Design As mentioned during my assignment on [protein coding genes][#lesson7], I will be working with Chromera velia, a recently characterized and sequenced, photosynthetic, unicellular eukaryote. In Woo et al. 2015, they generate a plethora of RNA-seq data; multiple replicates for 36 different conditions. Their reasoning for this was to correlate changes in transcript abundance under different enviornmental conditions with the developmentally regulated transcript abundance seen in Plasmodium falciparum to identify genes that are perhaps conserved in their gene regulation mechanisms. My goal is to use a subset of these RNA-seq data sets to detect whether we can see transcriptional activity at any of the identified transposable elements within Chromera velia. I will then compare the amount of transcription between two different conditions, using two biological replicates to identify transposable elements that are not only active, but may be regulated somehow. My workflow contains the following steps: Download raw reads from the SRA Align reads to the Chromera velia draft assembly Estimate transcript abundance for all predicted transposable elements Calculate differential abundance between conditions When I refer to accession numbers, they correspond to the following samples: suppressPackageStartupMessages(library(dplyr)) readr::read_tsv(&quot;data/lesson8/design.tsv&quot;) %&gt;% knitr::kable() ERR572505 SaltConcentration:Low;Iron:Minus;Temperature:cold;TimeOfTemperatureApplied:halfhr;BiologicalReplicate:1st; ERR572506 SaltConcentration:Low;Iron:Minus;Temperature:cold;TimeOfTemperatureApplied:halfhr;BiologicalReplicate:2nd; ERR572496 SaltConcentration:Low;Iron:Minus;Temperature:cold;TimeOfTemperatureApplied:2hrs;BiologicalReplicate:1st; ERR572507 SaltConcentration:Low;Iron:Minus;Temperature:cold;TimeOfTemperatureApplied:2hrs;BiologicalReplicate:2nd; 8.3.2 Downloading the data First we have to download the data and store it as FASTQ format. For this we need to use the SRA toolkit. The following command can fetch the FASTQ files for accessions ERR572505, ERR572506, ERR572496, and ERR572507. # from the command line... for acc in $(cut -f1 data/lesson8/design.tsv); do fastq-dump --split-files --gzip --outdir data/lesson8/ &quot;$acc&quot; done Here I’m looping through each accession ID, splitting the files into forward and reverse reads, and compressing them since I don’t need to view them in their raw form. The draft assembly for Chromera velia can be downloaded from CryptoDB, version 28. # download reference download.file(url = &quot;http://cryptodb.org/common/downloads/release-28/CveliaCCMP2878/fasta/data/CryptoDB-28_CveliaCCMP2878_Genome.fasta&quot;, dest = &quot;CryptoDB-28_CveliaCCMP2878_Genome.fasta&quot;) # download gene models download.file(url = &quot;http://cryptodb.org/common/downloads/release-28/CveliaCCMP2878/gff/data/CryptoDB-28_CveliaCCMP2878.gff&quot;, dest = &quot;CryptoDB-27_CveliaCCMP2878.gff&quot;) HOWEVER this contained the locations of only 94 transposable elements! 8.3.3 Aligning the reads Now that we’ve downloaded the necessary data we can align the reads to the genome. To do this, I used the NGS mapper, HISAT2, which can be used for DNA-seq or RNA-seq! First we need to index the genome: hisat2-build CryptoDB-27_CveliaCCMP2878_Genome.fasta CryptoDB-27_CveliaCCMP2878_Genom Next we can align our reads to the genome: for file in $(ls fastq); do hisat2 -x CryptoDB-27_CveliaCCMP2878_Genome -p 2 -U &quot;fastq/$file&quot; | \\ samtools view -hb - | \\ samtools sort -O &quot;bam&quot; -T XXX - &gt; &quot;${file%%.*}.bam&quot; &amp;&amp; \\ samtools index &quot;${file%%.*}.bam&quot; done The alignment statistics for all alignments look like this: ERR572496 3853220 reads; of these: 3853220 (100.00%) were unpaired; of these: 142273 (3.69%) aligned 0 times 3388612 (87.94%) aligned exactly 1 time 322335 (8.37%) aligned &gt;1 times 96.31% overall alignment rate ERR572505 15984026 reads; of these: 15984026 (100.00%) were unpaired; of these: 378986 (2.37%) aligned 0 times 14616391 (91.44%) aligned exactly 1 time 988649 (6.19%) aligned &gt;1 times 97.63% overall alignment rate ERR572506 10400377 reads; of these: 10400377 (100.00%) were unpaired; of these: 224755 (2.16%) aligned 0 times 9517931 (91.52%) aligned exactly 1 time 657691 (6.32%) aligned &gt;1 times 97.84% overall alignment rate ERR572507 9162105 reads; of these: 9162105 (100.00%) were unpaired; of these: 193498 (2.11%) aligned 0 times 8376362 (91.42%) aligned exactly 1 time 592245 (6.46%) aligned &gt;1 times 97.89% overall alignment rate In summary, for about 40 million reads, !91% of them aligned uniquely to the genome! These are great numbers relative to reads aligning to the falciparum genome, where low complexity sequence and highly recombinant and antigenic gene families can make even a simple task such as this, into a big pain. 8.3.4 Estimating abundance In order to estimate transript abundance I will use StringTie, which can also be used to assemble transcripts after reads have been mapped to a reference genome. In this context, we’ll be telling StringTie to only calculate the transcript abundance for the gene models we’re interested in and to ignore reads that map elsewhere. for file in $(ls *.bam); do stringtie retrotransposable_elements.gff -p 2 -b &quot;${file%%.*}_tables&quot; -A &quot;${file%%.*}.abund&quot; -e -x done This generates a file that looks like the following: readr::read_tsv(&quot;data/lesson8/stringtie_estimates/ERR572496_1.abund&quot;,n_max=10) %&gt;% select(`Gene ID`, Coverage, FPKM, TPM) %&gt;% DT::datatable() There is more information in each abundance file such as the gene name and the genomic coordinates of each gene. In addition, we generated one of these files for each sequencing library. We can briefly take a look at what the most highly expressed transcripts are across samples and how many transcripts are not detected at all (TPM of zero). First let’s take a look at highly abundant transcripts across samples. We’ll order it by TPMs from sample ERR572496. options(digits = 3) readr::read_tsv(&quot;data/lesson8/stringtie_estimates/ERR572496_1.abund&quot;) %&gt;% select(`Gene ID`, TPM) %&gt;% mutate(sample=&quot;ERR572496&quot;) -&gt; ERR572496 readr::read_tsv(&quot;data/lesson8/stringtie_estimates/ERR572505_1.abund&quot;) %&gt;% select(`Gene ID`, TPM) %&gt;% mutate(sample=&quot;ERR572505&quot;) -&gt; ERR572505 readr::read_tsv(&quot;data/lesson8/stringtie_estimates/ERR572506_1.abund&quot;) %&gt;% select(`Gene ID`, TPM) %&gt;% mutate(sample=&quot;ERR572506&quot;) -&gt; ERR572506 readr::read_tsv(&quot;data/lesson8/stringtie_estimates/ERR572507_1.abund&quot;) %&gt;% select(`Gene ID`, TPM) %&gt;% mutate(sample=&quot;ERR572507&quot;) -&gt; ERR572507 abund &lt;- bind_rows(ERR572496,ERR572505,ERR572506,ERR572507) %&gt;% tidyr::spread(sample, TPM) abund %&gt;% arrange(desc(ERR572496)) %&gt;% head(10) %&gt;% DT::datatable() Interestingly enough, we can already see that there are huge differences in transcript abundance for Cvel_17262. This difference in TPM doesn’t represent the absolute transcript copy number, but rather the proportion of of this transcript relative to the total transcript pool. However, this indcates that values across biological replicates are not consistent! So let’s look at scatter plots of the TPMs between biological replicates. suppressPackageStartupMessages(library(cowplot)) # calculate correlation c1 &lt;- cor(log10(abund$ERR572496+1), log10(abund$ERR572507+1)) abund %&gt;% select(ERR572496,ERR572507) %&gt;% ggplot(aes(x=ERR572496,y=ERR572507)) + geom_point() + geom_abline(colour=&quot;red&quot;) + scale_x_log10( breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + scale_y_log10( breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + annotate(&quot;text&quot;,x=0.01,y=10000,label=paste(&quot;Pearson: &quot;,c1)) + panel_border(size=1,colour=&quot;black&quot;) + theme(axis.line.y = element_line(size=0.25)) Figure 8.1: Scatter plot of biological replicates for both conditions c2 &lt;- cor(log10(abund$ERR572505+1), log10(abund$ERR572506+1)) abund %&gt;% select(ERR572505,ERR572506) %&gt;% ggplot(aes(x=ERR572505,y=ERR572506)) + geom_point() + geom_abline(colour=&quot;red&quot;) + scale_x_log10( breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + scale_y_log10( breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + annotate(&quot;text&quot;,x=0.01,y=10000,label=paste(&quot;Pearson: &quot;,c2)) + panel_border(size=1,colour=&quot;black&quot;) + theme(axis.line.y = element_line(size=0.25)) Figure 8.2: Scatter plot of biological replicates for both conditions From these plots we can see that, while for the most part, replicates are well correlated with one another, there are several examples of transcripts with highly variable abundance estimations between replicates. 8.3.5 Calculating differentiall expressed transcripts Finally, we can use the ballgown package to identify differentially abundant transcripts between conditions. First we need to read the data into ballgown: bg = ballgown(dataDir=&quot;data/lesson8/&quot;,samplePattern=&quot;tables&quot;,meas=&quot;all&quot;) save(bg, file=&quot;data/lesson8/ballgown/bg.rda&quot;) Next we provide the design matrix: suppressPackageStartupMessages(library(ballgown)) load(file=&quot;data/lesson8/ballgown/bg.rda&quot;) pData(bg) &lt;- data.frame(id=sampleNames(bg), group=c(0,1,1,0)) knitr::kable(pData(bg)) id group ERR572496_1_tables 0 ERR572505_1_tables 1 ERR572506_1_tables 1 ERR572507_1_tables 0 Finally, we call differentially abundant transcripts: # run statistical test results &lt;- stattest(bg, feature=&quot;transcript&quot;, meas=&quot;FPKM&quot;, covariate=&quot;group&quot;) # add original gene IDs t2g &lt;- indexes(bg)$t2g t2g$t_id &lt;- as.character(t2g$t_id) results$id &lt;- as.character(results$id) results &lt;- inner_join(results, t2g, by = c(&quot;id&quot; = &quot;t_id&quot;)) # show top results results %&gt;% select(g_id,pval,qval) %&gt;% arrange(qval) %&gt;% head(15) %&gt;% knitr::kable() g_id pval qval Cvel_3036.1 0 0.048 Cvel_16048 0 0.048 Cvel_3186.2 0 0.048 Cvel_16381 0 0.048 Cvel_16807 0 0.048 Cvel_18040 0 0.048 Cvel_6014 0 0.048 Cvel_25664 0 0.048 Cvel_26448 0 0.048 Cvel_26628 0 0.048 Cvel_6546 0 0.048 Cvel_29771 0 0.048 Cvel_2425 0 0.048 Cvel_4280 0 0.061 Cvel_21671 0 0.061 Based on the calculated q-values, we can see here that not many transcripts are significantly different between our two samples if we use a q-value cutoff of 0.05. 8.3.6 Conclusions If we investigate which transcripts are barely differentially abundant, we can see an RNA-binding protein, a HCl exchange transporter 3, and a NACHT, LRR and PYD domains-containing protein are in the list. The rest are hypoehtical proteins. Even those listed are of putative function since they haven’t been biochemically and biologically characterized. "],
["lesson9.html", "9 Comparative genomices 9.1 Learning Objectives 9.2 Notes 9.3 Assignment", " 9 Comparative genomices 9.1 Learning Objectives Distinguish neutral evolution, negative selection, and positive selection Interpret alignments of genomic DNA sequences as showing evidence of evolutionary constraint or adaptation, distinguishing both from evidence consistent with neutral evolution. Show how you can use genome comparisons between species to estimate the amount of functional sequence – and to identify it Understand the basics of several tests for selection or scores that estimate likelihood of being under selection Ka/Ks test phastCons Extended haplotype homozygosity Understand the connection between gene duplication and adaptive evolution 9.2 Notes Functionally less important molecules or parts of a molecule evolve faster than more important ones. — Kimura and Ohta (1974) PNAS USA 71: 2848-2852 9.3 Assignment "],
["lesson10.html", "10 Gene regulatory modules 10.1 Learning Objectives 10.2 Assignment", " 10 Gene regulatory modules 10.1 Learning Objectives Describe how to use genomic-wide epigenetic data to find DNA sequences involved in gene regulation. Identify features associated with gene regulation (altered chromatin, histone modification, occupancy by RNA polymerase and transcription factors) Compare various sequence census methods. Interpret information from high-throughput methods that measure features with gene regulation comprehensively with high resolution across genomes. 10.2 Assignment "],
["lesson11.html", "11 Non-genic functional sequences 11.1 Learning Objectives 11.2 Assignment", " 11 Non-genic functional sequences 11.1 Learning Objectives Learn the major modular principles for how long noncoding RNAs (lncRNAs) could function Learn how lncRNAs are discovered, and methods for filtering to find the ones more likely to be functional Engage in the ongoing debate about how many of the lncRNAs are functional Critically consider the assessment that a large majority of the human genome is “functional” in the sense that the DNA sequences are subjected to a biochemical activity 11.2 Assignment "],
["lesson12.html", "12 Finding function by phenotype 12.1 Learning Objectives 12.2 Assignment", " 12 Finding function by phenotype 12.1 Learning Objectives Genetic association studies are currently identifying, with high precision and statistical support, loci that contribute to complex traits, such as disease susceptibility. How can you find these results easily? How can you use the data and insights from the earlier topics to develop testable hypotheses about how variation among humans at these loci lead to increased susceptibility to disease? How do you use genome editing to test hypotheses about function? The advent of genome-wide genotyping and sequencing of many humans has opened an exciting but challenging prospect of personalized medicine, and this prospect serves as a motivating example for this section of the course. 12.2 Assignment "],
["project.html", "Project", " Project Genomic landscape during the transition from a free-living lifestyle to obligate intracellular parasitism In Woo et al. they “speculate that a group of functionally related proteins associated with the flagellar apparatus was repurposed as a module of the apical complex and became a foundation for the invasion machinery.” I want to explore the evolution of striated fiber assemblin in alveolates and specifically during the transition to apicomplexan parasites because it was noted as the only flagellar component found in all apicomplexans tested in the paper (Plasmodium, Toxoplasma, Cryptosporidium, Bebesia, Theileria). In addition we can extend that analysis to look at proteins found to be co-expressed with SFA in Chromerids (as shown in figure 4). This module includes several types of genes implicated in host cell invasion processed of apicomplexans such as genes encoding rhoptry protein ROP9, apical sushi protein ASP, and gliding motility components GAP40 and GAPM2. "],
["references.html", "References", " References REFERENCES TO ADD HISAT2 Stringtie Ballgown "]
]
